notes.txt is about course content (interpreters, vm...)

this is more about cpp specific things: features, types, syntax..


Lecture 3: Logger implementation

std::cerr -> "character error (stream)"
general note: is used for writing error message and diagnostic
information to the error stream

is provided by the C++ Standard Library (std)

this seems to be "unbuffered" and the output "is not delayed and is
immediately displayed" (so it would print even if the program crashses
or terminates unexpectedly)

may take a look in more details about:
- std::cout
- std:flush
- and the std::cerr itself
and this "buffered" thing (looks like the content to be displayed is
    stored in memory before goes actually to the console for some
    performance related reason...)


C++ macros, like:
`#define log(value) std::cout << #value << " = " << (value) << "\n"`
(from src/Logger.h)

this seems to be a way to define a text substitution at compile time

- #define is the "preprocessor directive used to define a macro"
- log(value) is the name of the macro
- #value gets the name of the variable was "passed"
  (value) gets the value of that variable

  ** just note: text substitution in compile time

Also there is a problem with this thing, that I can't display the
hex `opcode` in terminal (at least iTerm2), don't know exactly why


Same for:
`#define DIE ErrorLogMessage()`, that is text substitution

```c++
DIE; // Expands to ErrorLogMessage();
```

"A macro is a piece of code in a program that is replaced by the
value of the macro. [...] Whenever a macro name is encountered by the
compiler, it replaces the name with the definition of the macro"

"A macro is defined by the #define directive"

Ref: https://www.geeksforgeeks.org/macros-and-its-types-in-c-cpp/




Lecture 4: Numbers | Introduction to Stack

uint8_t -> unsigned interger type with width of exactly 8 bits
    - 0 to 255 (unsigned can't represent negative values)

std::array -> <class T, std::size_t N>
    * size_t can store the maximum size of a theoretically possible
        object of any type (including array)

std::vector -> "is a sequence that encapsulates dynamic size arrays"


About pointers:
```c++
uint8_t* ip;
std::vector<uint8_t> code;
ip = &code[0] // Gets the MEMORY ADDRESS of the first element of code
```

printing out ip:
```c++
std::cout << "ip = " << static_cast<void*>(ip) << std::endl;

// Result: ip = 0x5054f8
```

now about `static_cast<void*>`...
- `void*` is known as "pointer to void" or "generic pointer"
- can hold the ADDRESS of any data type (type-neutral)
- when std::cout, explicitly cast `ip` to a `void*`, which tells the
    compiler that the value being printed is a pointer without any
    specific type


`uint8_t* ip;` -> declares a variable named ip that can store
THE MEMORY ADDRESS of an uint8_t variable or an array of uint8_t values

operations on ip:
`ip` -> the memory address stored in the pointer (like, 0x5054..)
`*ip` -> access the VALUE at memory location POINTED BY 'ip'
`&ip` -> the memory address of the pointer variable ip itself

examples:
```c++
uint8_t* ip;
uint8_t x = 42;

ip = &x;                     // points to the memory location of 'x'

uint8_t value = *ip;         // value = 42
uint8_t** pointerToIp = &ip; // pointerToIp = location of ip
```

so, what we use in the READ_BYTE() macro, for example:
`*ip++` -> will point to the next element in the sequence

******* now i finally got it: note that `*ip++` are 2 operations,
first `*ip` gets the value at memory location pointed by 'ip' and
THEN apply the increase operator `ip++`, that will update 'ip' to
point to the next memory location (8 bits forward)


example:
```c++
int main() {
    uint8_t arr[] = {10,20,30,40,50};
    uint8_t* ip = arr;

    for (int i = 0; i < 5; i++) {
        std::cout << "Element " << i << ": " << static_cast<int>(*ip) << ", Address: " << static_cast<void*>(ip) << std::endl;

        ip++;

        // *ip++ here would be a "warning", because the "expression
        // result would be unused"
    }

    return 0;
}
```


output:
```
Element 0: 10, Address: 0x505294
Element 1: 20, Address: 0x505295
Element 2: 30, Address: 0x505296
Element 3: 40, Address: 0x505297
Element 4: 50, Address: 0x505298
```



auto keyword:
the type of the variable being declared will be deducted
from its initializer.




`void push(const EvaValue& value)`
- const keyword indicates that the value parameter cannot be modified
    whithin the function. It's a way to ensure the function does not
    alter the value of `value`
- EvaValue& indicates that the parameter value is the ORIGINAL, not
    a new copy of the EvaValue passed on function call.

    it still a "value", not a memory location.

    `sp` is a EvaValue*, so we can do `*sp = value`,
    `*sp` means the value at memory location pointed by 'sp'

    and then move the stack pointer with `sp++`

** Note: the point of passing the reference to the original parameter
and also using const may be to keep it readonly but still avoid make
a copy of the parameter (that may be a good thing for complex objects)

*** And just clarifying a bit more: value is of type `const EvaValue&`,
which is a reference (not a pointer) to an existing EvaValue object
passed as an argument to the function

- Calculating the size of the stack
    - `sp` -> the memory address stored in the pointer
    - `stack.begin()` -> the memory address where the stack started
    - `sp - stack.begin()` -> the number of elements between then 

    ** technically, it seems both `sp` and `stack.begin()` are
    called "iterators"
    - [ ] take a look on it

    *** may be a good practice convert (sp - stack.begin()) to size_t,
    to avoid compiler warnings or type mismatch issues (make sure
    the result of the operation is an unsigned integer before comparing
    with the STACK_LIMIT (make sure comparing values of the same type)

    this is the full code, btw:
    ```c++
    if ((size_t)(sp - stack.begin()) == STACK_LIMIT) {
        // Results in Stack Overflow.
    }
    ```


union declaration:
"A union is a special class type that can hold only one of its
non-static data members at a time"

Exemplo do item de supermercado:
```c++
struct {
    char nome[50];
    float preco;
    float volume;  // em litros.
    unsigned peso; // em gramas.
}
```

Exemplo de memória alocada (bytes, só para ilustrar):
0 ----------- 49 - 50 ------- 53 - 54 --------- 57 - 58 ------- 61
    nome                preco           volume            peso

Vários alimentos, como leite, não são comprados em gramas, apenas
em litros, então o campo peso ocuparia espaço na memória (alocado para
a struct), mas que nunca teria um valor válido


Para REDUZIR a memória utilizada, podemos declarar DENTRO de uma union
os campos `volume` e `peso`:
```c++
struct {
    char nome[50];
    float preco;
    union {
        float volume;
        unsigned peso;
    }
}
```

Novo layout de memória:
0 --------- 49 - 50 --------- 53 - 54 ------------------ 57
    nome              preco              volume/peso

"quando acessarmos `struct item.volume`, o compilador sabe que
estamos tratanado daquela região de memória, e irá tratar o valor
como `float`. O memso vale para `struct item.peso` mas vai aplicar
as regras do tipo `unsigned`"

** "O compilador vai reservar memória idêntica ao tamanho do tipo
da variável com maior tamanho"

Ref: https://pt.stackoverflow.com/questions/46668/o-que-são-unions-por-que-utilizá-los-dentro-de-structs


Outro exemplo:
```c++
union S
{
    std::int32_t n;     // occupies 4 bytes
    std::uint16_t s[2]; // occupies 4 bytes
    std::uint8_t c;     // occupies 1 byte
};                      // the whole union occupies 4 bytes
```

"Each member is allocated as if it is the only member of the class."

Ref: https://en.cppreference.com/w/cpp/language/union


Lecture 5: Math binary operations

NOTE: debugger:
``` bash
lldb ./eva-vm
```

(b -> break)
"break in the eval function": `b eval`

(r -> run)
just press `r` to start running and
`n` to go step by step

(p -> peak)
"we can instrospect what is in the top of the stack": `p stack[0]`


About macros with multiple lines (like the BINARY_OP we created here):
```c++
#define BINARY_OP(op)                \
    do {                             \
        auto op2 = AS_NUMBER(pop()); \
        auto op1 = AS_NUMBER(pop()); \
        push(NUMBER(op1 op op2));    \
    } while (false)
```

- `#define BINARY_OP(op)` defines a macro named "BINARY_OP" with a
    parameter "op", that will be replaced when the macro is used
- `\` the backlash indicates that the macro continues on the next line
- `do { ... } while (false)` is used to create a block of code.
    This is common idiom used to ENSURE THAT THE MACRO BEHAVE LIKE A
    SINGLE STATEMENT and can be used in control structures (e.g. if-else)
    without issues

    `do {...} while (false)` creates a loop condition that is always
    false, so the loop body is executed once and then exists immediately
    ```c++
    int main() {
        do {
            // This really executes only once
            std::cout << "Loop body" << std::endl;
        } while (false);
    }

    /** 
      * Output:

        Loop body
        Normal program termination. Exit status: 0
        
      */
    ```

